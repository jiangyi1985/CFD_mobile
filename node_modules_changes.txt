1. react-native-swiper/src/index.js
 Add function at line 264
 onPageScroll(e) {
   // update scroll state
	 this.setState({
	   isScrolling: false
	 })

   this.setState({
	   index: e.nativeEvent.position,
	   offset: e.nativeEvent.offset,
	 })

	 // Note: `this.setState` is async, so I call the `onMomentumScrollEnd`
	 // in setTimeout to ensure synchronous update `index`
	 this.setTimeout(() => {
	   this.autoplay()

	   // if `onMomentumScrollEnd` registered will be called here
	   this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e, this.state, this)
	 })
 },

 Add code at line 455
 onPageScroll={this.onPageScroll}

2. react-native-swiper/package.json
change to "main": "src/index.js", at line 62

3. /Users/Rambo/TH_CFD/node_modules/react-native-wx/ios/RCTWeChatAPI/RCTWeChatAPI.m
at line 209, Fix a bug of RN0.33
NSURLRequest *request = [NSURLRequest requestWithURL:imageUrl];
[_bridge.imageLoader loadImageWithURLRequest:request
size:size scale:1
clipped:NO
  resizeMode:UIViewContentModeScaleToFill
  progressBlock:nil
completionBlock:^(NSError *error, UIImage *image) {
[self shareToWeixinWithData:aData image:image scene:aScene callBack:aCallBack];
}];

//        [_bridge.imageLoader loadImageWithTag:imageUrl size:size scale:1 resizeMode:UIViewContentModeScaleToFill progressBlock:nil completionBlock:^(NSError *error, UIImage *image) {
//            [self shareToWeixinWithData:aData image:image scene:aScene callBack:aCallBack];
//        }];


4. react-native-swiper/src/index.js
 	for iOS bug.
 	add function:
	  forceloop() {
	    if(this.props.autoplay) {
	      if (!Array.isArray(this.props.children) ||
	        !this.props.autoplay ||
	        this.internals.isScrolling ||
	        this.state.autoplayEnd)
	        return
	      this.scrollBy(this.props.autoplayDirection ? 1 : -1)
	    }
	  }

5. react-native-tabbar changes:
  1)  remove the npm package and add a copy in component folder since we will replace
      it with the one in component folder.
  2)  react-native-tabbar/libs/icon/raw.js
      line 34:
        setActiveColor(color){
          this.refs['wrap'].refs['child'].setActiveColor(color)
        }

        render() {
          const component = ChildComponent? <ChildComponent ref="child" {...this.props}/> : this.props.children;

  3)  react-native-tabbar/libs/icon/icon.js
      line 36:
      setActiveColor(color){
        this.setState({
          onActiveColor: color,
        })
      }

      render() {
        const { label, type, from, size, iconStyle, onActiveColor, onInactiveColor, ...rest } = this.props;
        const { selected } = this.state;

        const color = selected? (this.state.onActiveColor ? this.state.onActiveColor  : onActiveColor ): onInactiveColor
